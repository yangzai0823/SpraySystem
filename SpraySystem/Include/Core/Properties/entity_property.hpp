/*
 * Copyright (c) 2012, Willow Garage, Inc.
 * Copyright (c) 2017, Open Source Robotics Foundation, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Willow Garage, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef VWS_ENTITY_PROPERTY_HPP_
#define VWS_ENTITY_PROPERTY_HPP_

#include "Include/Core/Properties/property.hpp"
#include "Include/Core/visibility_control.hpp"

namespace vws
{
namespace properties
{
/// Property specialized to provide max/min enforcement for integers.
class CORE_MODULE EntityProperty : public Property
{
  Q_OBJECT

public:
  /// Constructor.
  /**
   * \param name The name of this property.
   *   Appears in the left column of a PropertyTreeWidget.
   * \param default_value The initial value to store in the property.
   *   Appears in the right column of a PropertyTreeWidget.
   * \param description Text describing the property.
   *   Is shown in the "help" area of a PropertyTreeWithHelp widget.
   * \param parent The parent Property, or NULL if there is no parent at this
   *   time.
   * \param changed_slot This should be a Qt slot specification,
   *   generated by Qt's @c SLOT() macro.
   *   It should be a slot on the receiver object, or if receiver is not
   *   specified, it should be a slot on the parent.
   * \param receiver If receiver is non-NULL, the changed() signal is
   *   connected to the changed_slot on the receiver object.
   */
    explicit EntityProperty(
        const QString& name = QString(),
        const QString& ns = QString(),
        const QVariant& default_value = QVariant(),
        const QString& description = QString(),
        Property * parent = 0,
        const char * changed_slot = 0,
        QObject * receiver = 0);

    ~EntityProperty();
    void initialize();
    static Property * findProperty(QString name, QString ns);
    static QVariant getPropertyValue(QString name, QString ns);
    virtual void setName(const QString& name) override;
    QString getNameSpace() const { return ns; }
    void setNameSpace(QString ns) { this->ns = ns; }
private:
    QString ns;
};

}  // namespace properties
}  // namespace vws

#endif  // VWS_ENTITY_PROPERTY_HPP_
